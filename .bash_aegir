#!/bin/sh
# .bash_aegir
# To include this in your .bash environment add this to your .bashrc file (removing ##):
###-------------------------------------------------------------
### Aegir specific
###-------------------------------------------------------------
##if [ -f ~/.bash_aegir ]; then
##  . ~/.bash_aegir # --> Read ~/.bash_aegir if present
##fi

#-----------------------------------------------------------
#Aegir user related aliases
#-----------------------------------------------------------
#Note: for alias that will sudo -u add a space to the end of the alias to check for alias substitutions. i.e. using your aliases while using sudo
alias suaegir="CMDINFO echo 'suaegir => sudo -u aegir ' > /dev/tty; NORMAL sudo -u aegir "

#-----------------------------------------------------------
#drush related aliases
#-----------------------------------------------------------
alias adrush="CMDINFO echo 'adrush => suaegir drush ' > /dev/tty; NORMAL suaegir drush "
alias drush="CMDINFO echo 'drush => ' > /dev/tty; NORMAL adrush " #run all drush calls through aegir user

#-----------------------------------------------------------
#git aegir aliases
#-----------------------------------------------------------
alias agit="CMDINFO echo 'agit => suaegir git ' > /dev/tty; NORMAL suaegir git " #git as the aegir user
alias git="CMDINFO echo -n 'git => ' > /dev/tty; NORMAL agit " #run all git calls through the aegir user

#Aegir usage aliases
alias noAegirSilent="alias git=\"git\"; alias drush=\"drush\""; #restore normal git/drush usage during a session (w/o tty feedback)
alias noAegir="INFO echo '#No sudo -u aegir: git => git, drush => drush;' > /dev/tty; echo '#You can also prepend git/drush cmds with \' > /dev/tty; echo '#Use alias useAegir to re-enable aegir alias ' > /dev/tty; echo -n > /dev/tty; NORMAL noAegirSilent"; #restore normal git/drush usage during a session
alias useAegir="INFO echo 'useAegir => alias git=\'agit\'; alias drush=\'adrush\'; > /dev/tty; echo '#use alias noAegir to disable ' > /dev/tty; echo -n > /dev/tty; NORMAL alias git=\"agit\"; alias drush=\"adrush\""; #restore aegir git/drush usage during a session

#noAegirSilent; #for noAegir branch

#-----------------------------------------------------------
#aegir aliases
#-----------------------------------------------------------
alias aliases_aegir="INFO echo '### Available Aegir Functions (.bash_aegir) ###'; NORMAL echo -n; cat ~/.bash_aegir | grep function; echo -n; INFO echo '### Aegir aliases (.bash_aegir) ###:'; NORMAL echo -n; cat ~/.bash_aegir | grep alias; echo -n; "

#-----------------------------------------------------------
#drush related functions
#-----------------------------------------------------------

#--------------------------------
# Drush drushverify function
#--------------------------------
function drushverify(){ # Aegir via Drush - verify a site. Usage: drushverify [-h -v] drushSiteAlias. Ex: $ drushverify hr.uoregon.edu = "drush provision-verify @hr.uoregon.edu; drush @hostmaster hosting-task @hr.uoregon.edu verify
  #!/bin/sh
  # Arguments = [-h (help) -v (verbose)]

  # Credit: Bash HEREDOC usage() and getops while loop: http://rsalveti.wordpress.com/2007/04/03/bash-parsing-arguments-with-getopts/

  usage()
  {
  cat << EOF
  function: drushverify

  This script triggers a provision verify on the local file system and initates a remote site verification for a specified site. Useful for running Aegir verify from the terminal
  Note: do not include @ symbol. 

  Usage: drushverify [-v] drushSiteAlias

  Example: drushverify hr.uoregon.edu
    Cmd line result: 
      $ drush provision-verify @hr.uoregon.edu
      $ drush @hostmaster hosting-task @hr.uoregon.edu verify

  OPTIONS:
     -v               -   Verbose
     -h               -   Help

  ARGUMENTS:
    drushSiteAlias    -   The drush site alias (with out '@') 
EOF
  }

  #### Args ####
  #Credit; tip on combining options with args: Thanks to http://stackoverflow.com/questions/11742996/shell-script-is-mixing-getopts-with-positional-parameters-possible
  # If there are options (-h v) then set arg 1 to the first var after those options
  ARG1=${@:$OPTIND:1}
  #ARG2=${@:$OPTIND+1:1}

  # testing show args
  CMDINFO echo "args: all args (\$*) passed to me -\"$*\"" > /dev/tty; NORMAL
  CMDINFO echo "ARG1: $ARG1" > /dev/tty; NORMAL
  CMDINFO echo "Number of args: $#" > /dev/tty; NORMAL

  #if there are no options then arg1 = $1 if it doesn't start with '-'
  if [ [ ! -n "$ARG1" ] -a [ $1 != "-*" ] ] ; then
    ARG1=$1
    CMDINFO echo "No Options past. ARG1 = \$1: $ARG1" > /dev/tty; NORMAL
  fi
} #end function drushverify