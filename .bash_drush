#!/bin/sh
# .bash_drush
# To include this in your .bash environment add this to your .bashrc file (removing ##):
###-------------------------------------------------------------
### Drush specific
###-------------------------------------------------------------
##if [ -f ~/.bash_drush ]; then
##  . ~/.bash_drush # --> Read ~/.bash_drush if present
##fi

PATH=$PATH:~/drush

#--------------------------------
#drush aliases
#--------------------------------
alias aliases_drush="INFO echo '### Available Drush Functions (.bash_drush) ###'; CMDINFO echo -n; cat ~/.bash_drush | grep function; echo -n; INFO echo '### Drush aliases (.bash_drush) ###:'; CMDINFO echo -n; cat ~/.bash_drush | grep alias; echo -n; NORMAL"

#-----------------------------------------------------------
# Drush prompt
#-----------------------------------------------------------
if [ -f ~/drush/drush.complete.sh ]; then
  . ~/drush/drush.complete.sh
  if [ "\$(type -t __git_ps1)" ] && [ "\$(type -t __drush_ps1)" ]; then
    PS1='\u@\h:\W$(__git_ps1 " (%s)")$(__drush_ps1 "[%s]")\$ '
  fi
fi

#----------------------------------------
#Directory Functions
#----------------------------------------
function currentDir(){
  SOURCE="$1"
  while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo $DIR
}

#-----------------------------------------------------------
# Drush cddrush function
#-----------------------------------------------------------
function cddrush(){ #cd to a drush site alias. Don't include the @ symbol. Usage: cddrush hr.uoregon.edu. => cd `drush dd @hr.uoregon.edu:%site`
  #!/bin/sh
  if [[ ! -n "$1" ]] ; then
    INFO echo 1>&2 "Usage: cddrush drush_site_alias (with out the @ symbol). ex: cddrush hr.uoregon.edu which executes:
cd \`drush dd @hr.uoregon.edu:%site\`"; NORMAL
  else
    CMDINFO echo "cd \`drush dd @$1:%site\`" > /dev/tty; NORMAL
    cd `drush dd @$1:%site`
  fi
}

#----------------------------------------
#Drush Backup Functions
#----------------------------------------
function drushbackdb(){ #drush backup db. Usage: drushbackdb drush.alias
  #!/bin/sh
  #if the first var is blank
  if [[ ! -n "$1" ]] ; then
    INFO echo -e "\n#drush db backup. Usage: drushbackdb drush.alias"; NORMAL
  else
    local drush_alias="$1"
    cmdArr=(); #Initiate command array to echo the cmd and run it.
    cmdArr=("${cmdArr[@]}" "cd `drush dd @"$drush_alias":%site`") #Add cmd to array
    cmdArr=("${cmdArr[@]}" "drush -v @"$drush_alias" cc all") #Add cmd to array
    cmdArr=("${cmdArr[@]}" "drush -v @"$drush_alias" watchdog-delete all --yes") #alternative would be to skip the WD table. #Add cmd to array
    ### These commands throw an error when run in the script... issue wiht the "?
    #cmdArr=("${cmdArr[@]}" 'drush -v @'$drush_alias' sql-query "DELETE FROM cache_form WHERE expire < UNIX_TIMESTAMP(NOW())" #Credit: http://nuvole.org/node/5') #Add cmd to array
    #cmdArr=("${cmdArr[@]}" 'drush -v @'$drush_alias' sql-query "DELETE FROM cache_update WHERE expire < UNIX_TIMESTAMP(NOW())"') #Add cmd to array

    cmdArr=("${cmdArr[@]}" 'drush -v @'$drush_alias' sql-dump --ordered-dump --structure-tables-key=common --result-file='`drush dd @$drush_alias:%dump`) #Add cmd to array
    #--no-cache #removed for drush 7.x-5.+

    for cmd in "${cmdArr[@]}";
    do
      CMDINFO
      echo "${cmd}";
      NORMAL
      ${cmd}
    done
  fi # end if [[ ! -n "$1" ]]
}

#--------------------------------
# Drush drupalSiteDirShort()
#--------------------------------
function drupalSiteDirShort(){ #Look at a path [default: current dir] and return the site dir name
  #!/bin/sh
  SOURCE="$1" #Allow for a passed dir. but default to current dir
  while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
  DIR="$( cd -P "$( dirname "$SOURCE" )"/"$(basename "$SOURCE" )" && pwd )"
  if (($DEBUG)) ; then
    echo $DIR #testing
  fi

  #Use the pwd and determine the site dir by eliminating everything before and including "/sites" and then everything after the dir name.
  $DIR 2> /dev/null | sed -e '/^[^\/sites]/d' -e 's/* \(.*\)/ \[\1\]/'
  siteDir=${DIR//*sites\//};
  siteDir=${siteDir//\/*/}
  echo $siteDir
}

#--------------------------------
# Drush drupalSiteDir()
#--------------------------------
function drupalSiteDir(){ #Look at a path [default: current dir] and return the site dir name
  #!/bin/sh
  #Use the pwd and determine the site dir by eliminating everything before and including "/sites" and then everything after the dir name.

  #TODO check for missing $ARG1

  usage()
  {
  cat << EOF
  drupalSiteDir usage:

  This script uses a path and determines the drupal site dir by eliminating everything before and including "/sites" and then everything after the dir name.
  Note: It defaults to the current directory but will accept any relative or absolute path

  Usage: drupalSiteDir [-dh]

  Example: drupalSiteDir
    Cmd line result:
      $ hr.uoregon.edu

  OPTIONS:
     -d               -   Debug Mode
     -h               -   Help

  ARGUMENTS:
    path              -   (optional) The path of the drush site or a directory therin. Defaults to current directory.
EOF
  }

  #### Options ####
  OPTIND=1 #set the OPTIND to 1 before each use. Ref: http://ss64.com/bash/getopts.html   "OPTIND is initialized to 1 each time the shell or a shell script is invoked." In this case (in a bash function) it's initialized once for each shell session so we need to reset it inside each function.
  # (p)reset vars
  HELP=0
  DEBUG=0
  # Check for options. (currently in a while loop and case statement for potential expansion)
  while getopts ":dh" OPTION;
  do
    case $OPTION in
      d) # DEBUG
        DEBUG=1
        INFO echo "Debuging mode" > /dev/tty; NORMAL
        ;;
      h)
        # Help
        HELP=1
        if (($DEBUG)) ; then
          INFO echo "Setting HELP: $HELP" > /dev/tty; NORMAL
        fi
        break
        ;;
      ?) #if no option is given continue on
        INFO echo "Unknown option: -$OPTARG" > /dev/tty; NORMAL
        ;;
    esac
  done

  SOURCE="$1" #Allow for a passed dir. but default to current dir
  while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
  DIR="$( cd -P "$( dirname "$SOURCE" )"/"$(basename "$SOURCE" )" && pwd )"
  if (($DEBUG)) ; then
    echo $DIR #testing
  fi

  #if there are no options then arg1 = $1 if it doesn't start with '-'
  if [ ! -n "$ARG1" ] && [[ $1 != -* ]] && [[ $# -gt 0 ]] ; then
    ARG1=$1
    if (($DEBUG)) ; then
      CMDINFO echo "Testing: No Options past. ARG1 = \$1: $ARG1" > /dev/tty; NORMAL
    fi
  fi

  #check for --help
  if [[ $1 == "--help" ]] ; then
    HELP=1
  fi

  if (($DEBUG)) ; then
    INFO echo "HELP: $HELP" > /dev/tty; NORMAL
  fi

  #If not ARG1 or ARG1 starts with a '-' then show usage, else execute script
  if [ ! -n "$ARG1" ] || [[ $ARG1 == -* ]] || (($HELP)) ; then
    usage
    if (($DEBUG)) ; then
      INFO echo "Testing: If no ARG1 or ARG1 starts with a '-' OR HELP = 1 then show usage, else execute script" > /dev/tty; NORMAL
    fi
  else
    $DIR 2> /dev/null | sed -e '/^[^\/sites]/d' -e 's/* \(.*\)/ \[\1\]/'
    siteDir=${DIR//*sites\//};
    siteDir=${siteDir//\/*/}
    echo $siteDir
  fi
  shift $((OPTIND-1)) #prepare OPTIND for the next option
}

function gitbackdb() { #git add and commit db backup. Usage: gitbackdb drush.alias "commit message"
  #if the first var is blank
  if [[ ! -n "$1" ]] ; then
    INFO echo -e "\n#git add and commit db backup. Usage: gitbackdb drush.alias \"commit message\""; NORMAL
  else
    local drush_alias="$1";
    #if 2nd var is blank
    if [[ ! -n "$2" ]] ; then
      local git_commit_msg="auto-commit of DB Dump";
    else
      local git_commit_msg="$2";
    fi #end if [[ ! -n "$2" ]]

    cd `drush dd @$drush_alias:%dumpdir`;
    git add `drush dd @$drush_alias:%dump`;
    git commit -am"$git_commit_msg";
    INFO
    echo "#BackupedDB. Use to restore: drush_restore_db $drush_alias; or \`drush @$drush_alias sql-connect\` < \`drush dd @$drush_alias:%dump\`. #To push your commit use: cd \`drush dd @$drush_alias:%dumpdir\`; git push origin master; cd -";
    #Should this include a drush -v @$drush_alias cc all?
    NORMAL
  fi # end if [[ ! -n "$1" ]]
}

function dg_db_backup(){ #drush git db backup. Usage: dg_db_backup drush.alias "commit message"
  #if the first var is blank
  if [[ ! -n "$1" ]] ; then
    INFO echo -e "\n#drush git db backup. Usage: dg_db_backup drush.alias \"commit message\""; NORMAL
  else
    local drush_alias="$1";
    local git_commit_msg="$2";
    #capture current dir so in order to return the user back to where they called the command
    #Relies on currentDir function
    local currentDir=`currentDir`;

    #backup db
    drushbackdb $drush_alias;
    #commit backup
    gitbackdb $drush_alias "$git_commit_msg";

    #cd `drush dd @$drush_alias:%site`;
    cd $currentDir;
  fi # end if [[ ! -n "$1" ]]
}

function drush_restore_db() { #drush restore db from backup. Usage: drush_restore_db drush.alias [path/to/dbbackup.sql] [db_backup.sql]
  #if the first var is blank
  if [[ ! -n "$1" ]] ; then
    INFO echo -e "\n#drush restore db from backup. Usage: drush_restore_db drush.alias [path/to/db_backup] [db_backup.sql]
Notes: do not use the '@' symbol in the alias name.
If there is no [path/to/dbbackup] specified then an attempt is made to use the %dumpdir value specifed by an available drush alias; i.e. drush dd @$drush_alias:%dumpdir
If there is no [db_backup.sql] specified then an attempt is made to use the %dump value specifed by an available drush alias; i.e. drush dd @$drush_alias:%dump"; NORMAL
  else
    local drush_alias="$1";
    #if 2nd var is blank
    if [[ ! -n "$2" ]] ; then
      local db_path_to_sql_dump=`drush dd @$drush_alias:%dumpdir`;
    else
      local db_path_to_sql_dump="$2";
    fi #end if [[ ! -n "$2" ]]

    #if 3rd var is blank
    if [[ ! -n "$3" ]] ; then
      local db_dump_file_name=`drush dd @$drush_alias:%dump`;
    else
      local db_dump_file_name="$3";
    fi #end if [[ ! -n "$3" ]]

    if [[ ! -n "$db_path_to_sql_dump" ]] ; then
      WARNING echo -e "Missing 2nd arg and no 'path/to/db_backup' was found."; NORMAL
    fi

    if [[ ! -n "$db_dump_file_name" ]] ; then
      WARNING echo -e "Missing 3rd arg and no 'db_backup.sql' file was found."; NORMAL
    fi

    INFO
    echo "#Restoring DB: ";
    CMDINFO
    echo "cd $db_path_to_sql_dump; \`drush @$drush_alias sql-connect\` < $db_dump_file_name; cd -";
    NORMAL
    #Should this include a drush -v @$drush_alias cc all?

    cd $db_path_to_sql_dump;
    `drush @$drush_alias sql-connect` < $db_dump_file_name;
    cd -;

    INFO
    echo "Process complete. Consider running
drush -v @$drush_alias cc all";
    NORMAL

  fi # end if [[ ! -n "$1" ]]
}

#-----------------------------------------------------------
#  Open Atrium Platform Creation functions
#-----------------------------------------------------------
## function mkOAplatform ##
### Usage: mkOAplatform(http://ftp.drupal.org/files/projects/openatrium-6.x-1.4-core.tar.gz, fastage-openatrium-1.4-dl-drupal-6.26) ####
function mkOAplatform(){ #dl and install openatrium in the directory specified (really it would work with any aegir:aegir owned tar.gz)
  #if the first var is blank
  if [[ ! -n "$1" ]] ; then
    INFO echo "#mkOAplatform is a function that lets you dl and set up a dir for an OA install.
 ##usage
 #$ cd /var/aegir/platforms/;
 #$ mkOAplatform url newDirName ';
 #ie: $ cd /var/aegir/platforms/; mkOAplatform http://ftp.drupal.org/files/projects/openatrium-6.x-1.4-core.tar.gz fastage-openatrium-1.4-dl-drupal-6.26';
    ";
    NORMAL
  else
    ## set vars ##
    #if 2nd var is blank
    if [[ ! -n "$2" ]] ; then
      local tempdir="temp-openatrium"
    else
      local tempdir=$2;
    fi #end if [[ ! -n "$2" ]]

    INFO echo "#tempdir: $2" > /dev/tty; NORMAL

    local releaseurl=$1; #ex: "http://openatrium.com/sites/openatrium.com/files/atrium_releases/atrium-1-1.tgz"
    local tgzfilename="$(basename $releaseurl)"   #possible option: filename="${fullfile##*/}"
    local extension=${tgzfilename##*.}
    local filename=${tgzfilename%.*}
    INFO
    echo "#filename: $filename" > /dev/tty;

    echo "#mkdir $tempdir" > /dev/tty;
    NORMAL
    sudo mkdir $tempdir;                    #make temp dir for new oa platform
    INFO
    echo "#chown -R aegir:aegir $tempdir" > /dev/tty;
    NORMAL
    sudo chown -R aegir:aegir $tempdir;     #set ownership
    INFO
    echo "#chmod -R g+w $tempdir" > /dev/tty;
    NORMAL
    sudo chmod -R g+w $tempdir;             #update perms
    INFO
    echo "#cd $tempdir" > /dev/tty;
    NORMAL
    cd $tempdir;                            #cd to new dir
    INFO
    echo "#wget $releaseurl" > /dev/tty;
    NORMAL
    sudo wget $releaseurl;                  #dl desired release
    INFO
    echo "#tar -xzf $tgzfilename" > /dev/tty;
    NORMAL
    tar -xzf $tgzfilename;                  #untar + gzip
    INFO
    echo "#rm $tgzfilename" > /dev/tty;
    NORMAL
    sudo rm $tgzfilename;                   #delete .tgz file

    local newfilename=$(ls -d */);
    #newfilename="$filename-dl";
    INFO
    echo "#newfilename $newfilename" > /dev/tty;
    echo "#chown -R aegir:aegir $newfilename" > /dev/tty;
    NORMAL
    sudo chown -R aegir:aegir $newfilename;    #set ownership
    INFO
    echo "#chmod -R g+w $newfilename" > /dev/tty;
    NORMAL
    sudo chmod -R g+w $newfilename;         #update perms
    INFO
    echo "#mv $newfilename* ." > /dev/tty;
    NORMAL
    sudo mv $newfilename* .;                #change dir name and move up a dir
    INFO
    echo "#rm -R $newfilename" > /dev/tty;
    NORMAL
    sudo rm -R $newfilename;                #remove old dir
  fi # end if [[ ! -n "$1" ]]
}
