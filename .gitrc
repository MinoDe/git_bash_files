#!/bin/sh
# .gitrc
# To include this in your .bash environment add this to your .bashrc file (removing ##):
###-------------------------------------------------------------
### User specific git aliases and functions
###-------------------------------------------------------------
##if [ -f ~/.gitrc ]; then
##  . ~/.gitrc # --> Read ~/.gitrc if present
##fi

#-----------------------------------------------------------
# Simple Git functions
#-----------------------------------------------------------
function cur_git_branch { #returns the current branch; inline usage ex: git pull origin `cur_git_branch`
  \git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
  #git describe --contains --all HEAD
}
alias @branch=cur_git_branch # usage ex: git pull origin `@branch`
alias @br=@branch # usage ex: git pull origin `@br`

#-----------------------------------------------------------
# Git prompt
#-----------------------------------------------------------
# Git Bash shell command completion simple:
function parse_git_branch {
  \git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'
  #git describe --contains --all HEAD
}
#PS1="\u@\h:\W \$(parse_git_branch)\$ "

#get current remotes:
function show-git-current-remotes-short(){ # This prints the matching remotes for the current branch name. Short version of show-git-current-remotes()
  #!/bin/sh
  if [[ -n "$( cur_git_branch )" ]] ; then
    originalBranch="$(\git rev-parse --abbrev-ref HEAD)"
    remoteMatchesArr=(); #Initiate remoteMatches array
    branches=()
    eval "$(\git for-each-ref --shell --format='branches+=(%(refname))' refs/remotes/)" #remote branches.
    for branch in "${branches[@]}";
    do
      branchName="$(basename ${branch})"
      #set remoteName
      oIFS="$IFS";
      IFS='/' read -ra remoteArr <<< "$branch"
      remoteName="${remoteArr[2]}"
      if [[ $branchName == "$originalBranch" ]] ; then #capture the remote name
        remoteMatchesArr=("${remoteMatchesArr[@]}" "$remoteName") #Add remotes to array
        #remotes="$remotes $remoteName";
      fi
    done
    IFS="$oIFS"
    echo ${remoteMatchesArr[@]} | sed 's/ / | /g' #delimit remotes with |
  fi #end if git dir
  unset remoteMathesArr
}

#--------------------------------
# Drush drupalSiteDirPS1()
#--------------------------------
function drupalSiteDirPS1(){ #Look at a path [default: current dir] and return the site dir name
  #!/bin/sh
  SOURCE="$1" #Allow for a passed dir. but default to current dir
  while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
  DIR="$( cd -P "$( dirname "$SOURCE" )"/"$(basename "$SOURCE" )" && pwd )"

  #Use the pwd and determine the site dir by eliminating everything before and including "/sites" and then everything after the dir name.
  $DIR 2> /dev/null | sed -e '/^[^\/sites]/d' -e 's/* \(.*\)/ \[\1\]/'
  siteDir=${DIR//*sites\//};
  siteDir=${siteDir//\/*/}
  if [[ -n "$siteDir" ]] ; then
    echo '('$siteDir') '
  fi
}

#Complex with .git-prompt.sh
if [ -f ~/.git-prompt.sh ]; then
  . ~/.git-prompt.sh

  #get current repo:
  function git_repo_name() {
    g="$(__gitdir)"
    if [ -n "$g" ]; then
      #echo '.git Dir!'
      #display repository aliases
      remoteArr=(`git remote`);
      #display array replacing spaces with pipe
      echo ${remoteArr[*]} | sed 's/ / | /';
    fi
  }
  #$(git_repo_name)

  #PS1='\u@\h \W$(__git_ps1 " (%s)")\$ '
  #PS1='\u@\h \W$(__git_ps1 " ($(git_repo_name) [%s])")\$ '
  #PS1='\u@\h:$(drupalSiteDirPS1)\W$(__git_ps1 " ($(show-git-current-remotes-short) [%s])")\$ '
#else
  #PS1="\u@\h:\W \$(parse_git_branch)\$ "
  #PS1="\u@\h:\W (\$(show-git-current-remotes-short)\$(parse_git_branch))\$ "
  #PS1="\u@\h:\$(drupalSiteDirPS1)\W (\$(show-git-current-remotes-short)\$(parse_git_branch))\$ "
fi

#-------------------------------------------------------------
# User specific colors
#-------------------------------------------------------------
if [ -f ~/.bash_colors ]; then
  . ~/.bash_colors # --> Read ~/.bash_colors if present
fi

#-----------------------------------------------------------
# Git aliases
#-----------------------------------------------------------
alias gpushom="CMDINFO echo 'gpushom => git push origin master ' > /dev/tty; NORMAL git push origin master;"
alias gpullom="CMDINFO echo 'gpullom => git pull origin master ' > /dev/tty; NORMAL git pull origin master;"
alias gpusho="CMDINFO echo 'gpusho => git push origin ' > /dev/tty; NORMAL git push origin "
alias gpullo="CMDINFO echo 'gpullo => git pull origin ' > /dev/tty; NORMAL git pull origin "
alias gps="CMDINFO echo -n 'gps => ' > /dev/tty; NORMAL gpusho "
alias gpl="CMDINFO echo -n 'gpl => ' > /dev/tty; NORMAL gpullo "
alias gst="CMDINFO echo 'gst => git status ' > /dev/tty; NORMAL git status "
alias gci="CMDINFO echo 'gci => git commit ' > /dev/tty; NORMAL git commit "
alias gco="CMDINFO echo 'gco => git checkout ' > /dev/tty; NORMAL git checkout "
alias gdf="CMDINFO echo 'gdf => git diff ' > /dev/tty; NORMAL git diff "
alias gbr="CMDINFO echo 'gbr => git br ' > /dev/tty; NORMAL git br "
#Added by Mino De to commit with changes to a branch
alias gcm="CMDINFO echo 'gcm => git commit -am message' > /dev/tty; NORMAL git-commit-with-message "
alias aliases_git="INFO echo '### Available Git Functions (.gitrc) ###'; CMDINFO echo -n; cat ~/bash/.gitrc | grep function; echo -n; INFO echo '### Git aliases (.gitrc) ###:'; CMDINFO echo -n; cat ~/bash/.gitrc | grep alias; echo -n; INFO echo '### Git config aliases (.gitconfig) ###:'; CMDINFO git config --list | grep alias; echo -n; NORMAL"

#-----------------------------------------------------------
# Git functions
#-----------------------------------------------------------
function git-commit-with-message(){
#Used to commit the current branch changes with a message
    git commit -am $1
}

function git-each(){ # git-each gitCommand #Usage: git-each <gitCommand> [includeRemoteBranch:bool - default false;] [loopRemoteBranches:bool - default false;] - Ex: git-each fetch; This triggers a loop through each branch and $ git checkout ${branch}; git fetch ${branch}; Ex 2: git-each status 1 1; This checkes out a local version of each remote branch and runs status on it: $ git checkout $remoteName ${branch}; git status ${branch};
  #!/bin/sh
  #Thanks to:
  ## http://stackoverflow.com/questions/3846380/how-to-iterate-through-all-git-branches-using-bash-script,
  ## http://stackoverflow.com/questions/11940977/how-to-update-a-file-across-all-branches-in-a-git-repository?lq=1,
  ## http://archive.linuxfromscratch.org/lfs-museum/3.1/LFS-BOOK-3.1-HTML/chapter07/functions.html,
  ## https://wiki.archlinux.org/index.php/Color_Bash_Prompt

  #loop through each local or remote branch and act on it. Could be adapted to create an array combining both.

  showHelp=false
  if [[ ! -n "$1" ]] ; then
  showHelp=true;
  fi
  if [[ $1 == "--help" ]] ; then
  showHelp=true;
  fi
  if $showHelp; then
    echo 1>&2 "  Usage: git-each <command> [<includeRemoteBranch:bool (default false)> <loopRemoteBranches:bool (default false)>]

  Example: git-each fetch;
  This function loops through each branch, checking it out and running the requested command; e.g. git fetch ${branch};
  Only single word commands are supported at this time (status, fetch, push, pull, etc...)
  See 'git --help' for more information on git usage.

  Optional args:
  <includeRemoteBranch:bool (default false)>
  if <includeRemoteBranch> is TRUE|true|1 then each <command> is appended with the remote branch '$remoteName $branchName'.
  Useful when pushing branches to a new repo or pulling down branches for the first time.
  Example following $ git remote set-url origin git@new.url:for/your_repo.git:
  $ git-each push 1

  <loopRemoteBranches:bool (default false)>
  if <loopRemoteBranches> is TRUE|true|1 then the remote branches are used as the basis for the array loop. Running $ git branch -a; will display all local and remote branches. It's useful to use the remote branches when pulling down all the remote branches for the first time.
  Example:
  $ git-each pull 1 1
    "
  else
    INFO echo "Initiating 'git-each $1'. List of local and remote branches: " > /dev/tty;  $GBRA; NORMAL

    #$1 => gitCommand
    #$2 => includeRemoteBranch:bool (default false)
    #$3 => loopRemoteBranches:bool (default false)
    if [[ ! -n "$2" ]] ; then
      includeRemoteBranch=false
    else
      if [ $2 == 1 -o $2 == "true" -o  $2 == "TRUE" ] ; then
        includeRemoteBranch=true
        INFO echo "<includeRemoteBranch> = true; Specifying remote branch for each command 'git $1 <remoteName> $branchName'" > /dev/tty; NORMAL
      fi
    fi
    if [[ ! -n "$3" ]] ; then
      loopRemoteBranches=false
    else
      if [ $3 == 1 -o $3 == "true" -o  $3 == "TRUE" ] ; then
        loopRemoteBranches=true
        INFO echo "<loopRemoteBranches> = true; Looping over remote branches" > /dev/tty; NORMAL
      fi
    fi

    #vars:
    originalBranch="$(\git rev-parse --abbrev-ref HEAD)"
    if $loopRemoteBranches; then
      branches=()
      eval "$(\git for-each-ref --shell --format='branches+=(%(refname))' refs/remotes/)" #remote branches.
    else
      branches=()
      eval "$(\git for-each-ref --shell --format='branches+=(%(refname))' refs/heads/)" #local branches. W/O refs/heads/ you get both local and remote listings.
    fi

    #command vars:
    GCMD="git $1"
    GBRA="git branch -a"

    #actions:
    for branch in "${branches[@]}";
    do
      branchName="$(basename ${branch})"
      #set remoteName
      IFS='/' read -ra remoteArr <<< "$branch"
      #FAILURE echo "remoteName: ${remoteArr[2]}"; NORMAL
      remoteName="${remoteArr[2]}"

      if [ $branchName != "HEAD" ] ; then #skip refs/remotes/HEAD as it's a symlink
        #Updated CMD Vars
        GCO="git checkout ${branchName}"
        if $includeRemoteBranch; then
           GCMD="git $1 $remoteName ${branchName}"
        fi
        INFO echo "1 - Checkout branch: ${branchName}" > /dev/tty; CMDINFO echo "$GCO" > /dev/tty; NORMAL $GCO; ##highlight checkout message
        #SUCCESS echo "branch name: ${branchName}" > /dev/tty; NORMAL
        INFO echo "2 - Execute CMD on branch: " > /dev/tty; CMDINFO echo "$GCMD" > /dev/tty; NORMAL $GCMD
        WARNING echo "##################" > /dev/tty; NORMAL
      fi
    done
    INFO echo "Complete" > /dev/tty; NORMAL
    INFO echo "Returning to your original branch: " > /dev/tty; CMDINFO echo "git checkout $originalBranch" > /dev/tty; NORMAL git checkout $originalBranch; echo -n;
    INFO echo "### All branches '$GBRA' ### "; NORMAL $GBRA;
    if [[ $1 == "st" || $1 == "status" ]] ; then
      INFO echo "Possible next steps? - If there is nothing to commit; fetch your branches: " > /dev/tty; echo "git-each fetch" > /dev/tty; echo -n; NORMAL
    fi
    if [[ $1 == "fetch" ]] ; then
      INFO echo "Possible next steps? - Pull your branches: " > /dev/tty; echo "git-each pull" > /dev/tty; echo -n; NORMAL
    fi
    if [[ $1 == "pull" ]] ; then
      INFO echo "Possible next steps? - Push your branches: " > /dev/tty; echo "git-each push" > /dev/tty; echo -n; NORMAL
    fi
  fi
}

function git-create-branch(){ # git-create-branch <branch_name>
  #!/bin/sh
  #from http://www.zorched.net/2008/04/14/start-a-new-branch-on-your-remote-git-repository/comment-page-2/#comment-18065
  if [[ ! -n "$1" ]] ; then
    INFO echo 1>&2 Usage: git-create-branch branch_name
    NORMAL
  else
    #$1 => branch_name
    #vars:
    GCO="git checkout -b $1";
    GPO="git push origin $1";
    GBRSUP="git branch --set-upstream $1 origin/$1";
    GBR="git branch";
    GBRR="git branch -r";
    #actions:
    INFO echo "Adding $1" NORMAL
    INFO echo "1 - Create the local branch from the current one: " > /dev/tty; CMDINFO echo "$GCO" > /dev/tty; NORMAL $GCO
    INFO echo "2 - Push that branch to the remote: " > /dev/tty; CMDINFO echo "$GPO" > /dev/tty; NORMAL $GPO
    INFO echo "3 - Set the upstream branch to track: " > /dev/tty; CMDINFO echo "$GBRSUP" > /dev/tty; NORMAL $GBRSUP
    INFO echo "4 - To checkout and track the remote branch from another location simply use: git checkout $1 or git checkout -t origin/$1" > /dev/tty; echo -n; NORMAL
    INFO echo "5 - If you need to delete the remote branch use: git-delete-branch $1 or git push origin :$1" > /dev/tty; echo -n; NORMAL
    INFO echo "### Local branches ($GBR) ### "; NORMAL $GBR
    INFO echo "### Remote branches ($GBRR) ### "; NORMAL $GBRR; INFO echo "#Use 'git branch -a' to list all"; NORMAL
  fi
}

function git-delete-branch(){ # git-delete-branch <branch_name>
  #!/bin/sh
  #modified from script and comments at http://www.zorched.net/2008/04/14/start-a-new-branch-on-your-remote-git-repository/comment-page-2/#comment-18065
  #if [ $# -ne 1 ]; then
  if [[ ! -n "$1" ]] ; then
    INFO echo 1>&2 Usage: git-delete-branch branch_name
    NORMAL
  else
    #$1 -> branch_name
    #vars:
    GCO="git checkout master";
    GPOD="git push origin :$1";
    GBRD="git branch -d $1";
    GFO="git fetch origin";
    GPL="git pull origin master"
    GBR="git branch";
    GBRR="git branch -r";
    #Verbose actions:
    INFO echo "Removing $1" NORMAL
    INFO echo "1 - Check out master branch: " > /dev/tty; CMDINFO echo "$GCO" > /dev/tty; NORMAL $GCO
    INFO echo "2 - Delete remote branch: " > /dev/tty; CMDINFO echo "$GPOD" > /dev/tty; NORMAL $GPOD
    INFO echo "3 - Delete local branch: " > /dev/tty; CMDINFO echo "$GBRD" > /dev/tty; NORMAL $GBRD
    INFO echo "4 - fetch and pull origin: " > /dev/tty; CMDINFO echo "$GFO; $GPL;" > /dev/tty; NORMAL $GFO; $GPL;
    INFO echo "### Local branches ($GBR) ### "; NORMAL $GBR
    INFO echo "### Remote branches ($GBRR) ### "; NORMAL $GBRR; INFO echo "#Use 'git branch -a' to list all"; NORMAL
  fi
}

function git-patch(){ # Apply a patch with git. Typical steps: stat, check, apply and if no errors occur use $ git am --signoff < ...patch.  Usage: git-patch stat|check|signoff URL.patch Ex: git-patch stat http://drupal.org/files/features-date-1279928-15.patch
  #!/bin/sh
  #from http://drupal.org/node/1399218
  if [[ ! -n "$1" ]] ; then
    INFO echo 'Usage: git-patch stat|check|apply URL.patch' > /dev/tty; NORMAL
  else
    local URL=$2;
    local patchFilename="$(basename $2)"
    if [[ $1 == "apply" ]] ; then
      if [[ $URL == http* ]] ; then
        CMDINFO echo "sudo wget $URL;" > /dev/tty; NORMAL
        sudo wget $URL; git $1 $patchFilename;
      fi
      CMDINFO echo "git $1 -v $patchFilename " > /dev/tty; NORMAL
      git $1 -v $patchFilename;
      INFO echo "# If the patch applied with no errors then use: "; > /dev/tty; CMDINFO echo "git am --signoff < $patchFilename" > /dev/tty; NORMAL
      INFO echo "# To delete the patch use: "; > /dev/tty; CMDINFO echo " rm $patchFilename" > /dev/tty; NORMAL
    else
      if [[ $URL == http* ]] ; then
        CMDINFO echo "sudo wget $URL;" > /dev/tty; NORMAL
        sudo wget $URL;
      fi
      CMDINFO echo "git apply -v --$1 $patchFilename" > /dev/tty; NORMAL
      git apply -v --$1 $patchFilename;
      INFO echo "Patchname: $patchFilename" > /dev/tty; NORMAL
    fi
    if [[ $1 == "stat" ]] ; then
      INFO echo "# To check the patch use: "; > /dev/tty; CMDINFO echo "git-patch check $patchFilename" > /dev/tty; NORMAL
    fi
    if [[ $1 == "check" ]] ; then
      INFO echo "# To apply the patch use: "; > /dev/tty; CMDINFO echo "git-patch apply $patchFilename" > /dev/tty; NORMAL
    fi
  fi
}

function show-git-current-remotes(){ # show-git-current-remotes #Usage: show-git-current-remotes - This checks the available remotes for a match with the current branch name and returns those remote names
  #!/bin/sh
   usage()
  {
  cat << EOF
  show-git-current-remotes usage:

  Usage: show-git-current-remotes - This checks the available remotes for a match with the current branch name and returns those remote names

  Ex: show-git-current-remotes [-dh]

  Example: show-git-current-remotes
    Cmd line result:
      $ drpl_prod | origin

  OPTIONS:
     -d               -   Debug Mode
     -h               -   Help

  ARGUMENTS:
    path              -   None
EOF
  }

  #### Options ####
  OPTIND=1 #set the OPTIND to 1 before each use. Ref: http://ss64.com/bash/getopts.html   "OPTIND is initialized to 1 each time the shell or a shell script is invoked." In this case (in a bash function) it's initialized once for each shell session so we need to reset it inside each function.
  # (p)reset vars
  HELP=0
  DEBUG=0
  # Check for options. (currently in a while loop and case statement for potential expansion)
  while getopts ":dh" OPTION;
  do
    case $OPTION in
      d) # DEBUG
        DEBUG=1
        INFO echo "Debuging mode" > /dev/tty; NORMAL
        ;;
      h)
        # Help
        HELP=1
        if (($DEBUG)) ; then
          INFO echo "Setting HELP: $HELP" > /dev/tty; NORMAL
        fi
        break
        ;;
      ?) #if no option is given continue on
        INFO echo "Unknown option: -$OPTARG" > /dev/tty; NORMAL
        ;;
    esac
  done

  #check for --help
  if [[ $1 == "--help" ]] ; then
    HELP=1
  fi

  #check if in git dir
  if [[ -n `cur_git_branch` ]] ; then
    HELP=1
    WARNING echo "You are not currently in a .git directory" > /dev/tty; NORMAL
  fi #end if not in git dir

  #display help status
  if (($DEBUG)) ; then
    INFO echo "HELP: $HELP" > /dev/tty; NORMAL
  fi

  #If help then show usage, else execute script
  if (($HELP)) ; then
    usage
  else
    if [ -n "$g" ]; then
      #### Vars ####
      originalBranch="$(\git rev-parse --abbrev-ref HEAD)"
      if (($DEBUG)) ; then
        INFO echo "Current Branch: $originalBranch" > /dev/tty;
      fi
      remoteMatchesArr=(); #Initiate remoteMatches array
      loopRemoteBranches=true;

      #### Actions ####
      if $loopRemoteBranches; then
        if (($DEBUG)) ; then
          INFO echo "loopRemoteBranches=true" > /dev/tty;
        fi
        branches=()
        eval "$(\git for-each-ref --shell --format='branches+=(%(refname))' refs/remotes/)" #remote branches.
      else
        branches=()
        eval "$(\git for-each-ref --shell --format='branches+=(%(refname))' refs/heads/)" #local branches. W/O refs/heads/ you get both local and remote listings.
      fi

      #actions:
      for branch in "${branches[@]}";
      do
        branchName="$(basename ${branch})"
        if (($DEBUG)) ; then
          INFO echo "Checking branch: ${branchName}" > /dev/tty;
        fi
        #set remoteName
        IFS='/' read -ra remoteArr <<< "$branch"
        if (($DEBUG)) ; then
          FAILURE echo "remoteName: ${remoteArr[2]}"; NORMAL
        fi
        remoteName="${remoteArr[2]}"
        if [[ $branchName == "$originalBranch" ]] ; then #capture the remote name
          remoteMatchesArr=("${remoteMatchesArr[@]}" "$remoteName") #Add remotes to array
          if (($DEBUG)) ; then
            INFO echo "Matching remote: $remoteName; for this branch: ${branchName}" > /dev/tty;
          fi
        fi
      done
      #displays remoteMatches (concatenated in an array)
      if (($DEBUG)) ; then
        SUCCESS echo ${remoteMatchesArr[@]} | sed 's/ / | /g' > /dev/tty; NORMAL
      else
        echo ${remoteMatchesArr[@]} | sed 's/ / | /g'
      fi
      if (($DEBUG)) ; then
        WARNING echo "##################" > /dev/tty; NORMAL
      fi
    fi #end if git dir
  fi # end execute script if not help
}
