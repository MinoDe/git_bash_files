# .gitrc
# To include this in your .bash environment add this to your .bashrc file (removing ##):
###-------------------------------------------------------------
### User specific git aliases and functions
###-------------------------------------------------------------
##if [ -f ~/.gitrc ]; then
##  . ~/.gitrc # --> Read ~/.gitrc if present
##fi

#-------------------------------------------------------------
# User specific colors
#-------------------------------------------------------------
if [ -f ~/.bash_colors ]; then
  . ~/.bash_colors # --> Read ~/.bash_colors if present
fi

#-----------------------------------------------------------
# Git prompt
#-----------------------------------------------------------
# Git Bash shell command completion
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'
}
#PS1="\h:\W \uCMDINFO\$(parse_git_branch) NORMAL\$"

if [ -f ~/.git-prompt.sh ]; then
    . ~/.git-prompt.sh
    PS1='\h:\W$(__git_ps1 "(%s)") \u\$ '
fi

#-----------------------------------------------------------
# Git aliases
#-----------------------------------------------------------
alias gpushom="CMDINFO echo 'gpushom => git push origin master ' > /dev/tty; NORMAL git push origin master;"
alias gpullom="CMDINFO echo 'gpullom => git pull origin master ' > /dev/tty; NORMAL git pull origin master;"
alias gpusho="CMDINFO echo 'gpusho => git push origin ' > /dev/tty; NORMAL git push origin "
alias gpullo="CMDINFO echo 'gpullo => git pull origin ' > /dev/tty; NORMAL git pull origin "
alias gps="CMDINFO echo -n 'gps => ' > /dev/tty; NORMAL gpusho "
alias gpl="CMDINFO echo -n 'gpl => ' > /dev/tty; NORMAL gpullo "
alias gst="CMDINFO echo 'gst => git status ' > /dev/tty; NORMAL git status "
alias gci="CMDINFO echo 'gci => git commit ' > /dev/tty; NORMAL git commit "
alias gco="CMDINFO echo 'gco => git checkout ' > /dev/tty; NORMAL git checkout "
alias gdf="CMDINFO echo 'gdf => git diff ' > /dev/tty; NORMAL git diff "
alias gbr="CMDINFO echo 'gbr => git br ' > /dev/tty; NORMAL git br "
alias aliases="INFO echo '### Available Functions (.bashrc) ###'; NORMAL echo -n; cat ~/.bashrc | grep function; echo -n; INFO echo '### Available Git Functions (.gitrc) ###'; NORMAL echo -n; cat ~/.gitrc | grep function; echo -n; INFO echo '### Git aliases (.gitrc) ###:'; NORMAL echo -n; cat ~/.gitrc | grep alias; echo -n; INFO echo '### Git config aliases (.gitconfig) ###:'; NORMAL git config --list | grep alias; echo -n; INFO echo '### Alias (.bash_alias) ###'; NORMAL alias"

#-----------------------------------------------------------
# Git functions
#-----------------------------------------------------------
function git-create-branch(){ # git-create-branch <branch_name>
  #!/bin/sh
  #from http://www.zorched.net/2008/04/14/start-a-new-branch-on-your-remote-git-repository/comment-page-2/#comment-18065
  if [[ ! -n "$1" ]] ; then
    INFO echo 1>&2 Usage: git-create-branch branch_name
		NORMAL 
  else
    #$1 => branch_name
    #vars:
    GCO="git checkout -b $1";
    GPO="git push origin $1";
    GBRSUP="git branch --set-upstream $1 origin/$1";
    GBR="git branch";
    GBRR="git branch -r";
    #actions:
    INFO echo "Adding $1" NORMAL
    INFO echo "1 - Create the local branch from the current one: '$GCO'" > /dev/tty; NORMAL $GCO
    INFO echo "2 - Push that branch to the remote: '$GPO'" > /dev/tty; NORMAL $GPO
    INFO echo "3 - Set the upstream branch to track: '$GBRSUP'" > /dev/tty; NORMAL $GBRSUP
    INFO echo "4 - To checkout and track the remote branch from another location simply use: git checkout $1 or git checkout -t origin/$1" > /dev/tty; echo -n; NORMAL
    INFO echo "5 - If you need to delete the remote branch use: git-delete-branch $1 or git push origin :$1" > /dev/tty; echo -n; NORMAL
    INFO echo "### Local branches ($GBR) ### "; NORMAL $GBR
    INFO echo "### Remote branches ($GBRR) ### "; NORMAL $GBRR; INFO echo "#Use 'git branch -a' to list all"; NORMAL
  fi
}

function git-delete-branch(){ # git-delete-branch <branch_name>
  #!/bin/sh
  #modified from script and comments at http://www.zorched.net/2008/04/14/start-a-new-branch-on-your-remote-git-repository/comment-page-2/#comment-18065
  #if [ $# -ne 1 ]; then
  if [[ ! -n "$1" ]] ; then
    INFO echo 1>&2 Usage: git-delete-branch branch_name
		NORMAL
  else
    #$1 -> branch_name
    #vars:
    GCO="git checkout master";
    GPOD="git push origin :$1";
    GBRD="git branch -d $1";
    GFO="git fetch origin";
    GPL="git pull origin master"
    GBR="git branch";
    GBRR="git branch -r";
    #Verbose actions:
    INFO echo "Removing $1" NORMAL
    INFO echo "1 - Check out master branch: '$GCO'" > /dev/tty; NORMAL $GCO
    INFO echo "2 - Delete remote branch: '$GPOD'" > /dev/tty; NORMAL $GPOD
    INFO echo "3 - Delete local branch: '$GBRD'" > /dev/tty; NORMAL $GBRD
    INFO echo "4 - fetch and pull origin: '$GFO; $GPL;'" > /dev/tty; NORMAL $GFO; $GPL;
    INFO echo "### Local branches ($GBR) ### "; NORMAL $GBR
    INFO echo "### Remote branches ($GBRR) ### "; NORMAL $GBRR; INFO echo "#Use 'git branch -a' to list all"; NORMAL
  fi
}

function git-patch(){ # Apply a patch with git. Typical steps: stat, check, apply and if no errors occur use $ git am --signoff < ...patch.  Usage: git-patch stat|check|signoff URL.patch Ex: git-patch stat http://drupal.org/files/features-date-1279928-15.patch
  #!/bin/sh
  #from http://drupal.org/node/1399218
  if [[ ! -n "$1" ]] ; then
    INFO echo 'Usage: git-patch stat|check|apply URL.patch' > /dev/tty; NORMAL
  else
    local URL=$2;
    local patchFilename="$(basename $2)"
    if [[ $1 == "apply" ]] ; then
      if [[ $URL == http* ]] ; then
        CMDINFO echo "sudo wget $URL;" > /dev/tty; NORMAL
        sudo wget $URL; git $1 $patchFilename;
      fi
      CMDINFO echo "git $1 -v $patchFilename " > /dev/tty; NORMAL
      git $1 -v $patchFilename;
      INFO echo "# If the patch applied with no errors then use: "; > /dev/tty; CMDINFO echo "git am --signoff < $patchFilename" > /dev/tty; NORMAL
      INFO echo "# To delete the patch use: "; > /dev/tty; CMDINFO echo " rm $patchFilename" > /dev/tty; NORMAL
    else
      if [[ $URL == http* ]] ; then
        CMDINFO echo "sudo wget $URL;" > /dev/tty; NORMAL
        sudo wget $URL;
      fi
      CMDINFO echo "git apply -v --$1 $patchFilename" > /dev/tty; NORMAL
      git apply -v --$1 $patchFilename;
      INFO echo "Patchname: $patchFilename" > /dev/tty; NORMAL
    fi
    if [[ $1 == "stat" ]] ; then
      INFO echo "# To check the patch use: "; > /dev/tty; CMDINFO echo "git-patch check $patchFilename" > /dev/tty; NORMAL
    fi
    if [[ $1 == "check" ]] ; then
      INFO echo "# To apply the patch use: "; > /dev/tty; CMDINFO echo "git-patch apply $patchFilename" > /dev/tty; NORMAL
    fi
  fi
}
